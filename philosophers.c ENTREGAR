/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philosophers.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: pespinos <pespinos@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/04/13 20:35:45 by pespinos          #+#    #+#             */
/*   Updated: 2023/04/13 20:35:46 by pespinos         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

int	ft_strlen(char *str)
{
	int	len;

	len = 0;
	while (str[len])
		len++;
	return (len);
}

long int	ft_atoi(char *str)
{
	long int	result;
	int 		s;
	int 		sign;

	result = 0;
	s = 0;
	sign = 1;

	while ((*str >= 9 && *str <= 13) || *str == 32)
		str++;
	if (*str == '+')
	{
		s++;
		str++;
	}
	if (*str == '-' && s == 0)
	{
		sign = -1;
		str++;
	}
	if (*str == '-' && s == 1)
		sign = 0;
	while (*str >= '0' && *str <= '9')
	{
		result = result * 10 + (*str - 48);
		str++;
	}
	return (sign * result);
}

long int	*ft_get_args(int argc, char **argv)
{
	long int	*args;
	int			n;

	n = 1;
	args = malloc ((argc - 1) * sizeof (*args));
	if (!args)
		return (NULL);
	while (n < argc)
	{
		args[n-1] = ft_atoi(argv[n]);
		n++;
	}
	return (args);
}

void	ft_print_number(long int n)
{
	char	number = 0;

	if (n == INT_MIN)
		write(1, "-2147483648", 11);
	else if (n < 0)
	{
		write(1, "-", 1);
		ft_print_number(-n);
	}
	else
	{
		if (n > 9)
			ft_print_number(n/10);
		number = (n%10) + 48;
		write(1, &number, 1);
	}
}

void	ft_print_data(int n_elem, t_philosopher *philosophers)
{
	int	p = 0;

	while (p < n_elem)
	{
		printf("----------PHILOSOPHER %i----------\n", philosophers[p].index_philosopher);
		printf("TIME TO DIE -> %li\n", philosophers[p].time_to_die);
		printf("TIME TO EAT -> %li\n", philosophers[p].time_to_eat);
		printf("TIME TO SLEEP -> %li\n", philosophers[p].time_to_sleep);
		printf("NUMBER OF TIMES -> %i\n", philosophers[p].number_of_times);
		printf("START EATING -> %li\n", philosophers[p].last_eating);
		//printf("START SLEEPING -> %li\n", philosophers[p].last_sleeping);
		//printf("START THINKING -> %li\n", philosophers[p].last_thinking);
		//ft_print_number(numbers[p]);
		write(1, "\n", 1);
		p++;
	}
}

long int	ft_get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
}

void	*philosopher(void *arg)
{
	t_all		*data;
	int			active;
	int			fork_right;
	int			fork_left;
	long int	time;
	long int	stop_time;
	int			n_times;

	data = (t_all *) arg;
	active = data->active;
	n_times = 0;
	// printf("FILOSOFO ACTIVO -> %i\n", data->philosophers[active].index_philosopher);
	// printf("DATA->ALL_ALIVE = %i\t\tNUMBER_EXIT = %i\t\tNUMBER_OF_TIMES = %i\n", data->all_alive, data->philosophers[active].number_exit, data->philosophers[active].number_of_times);

	//----------COMIENZO ASIGNACION TENEDORES----------
	fork_right = active;
	if (active == data->total_philosophers - 1)
		fork_left = 0;
	else
		fork_left = fork_right + 1;
	// printf("AL FILOSOFO %i LE CORRESPONDEN LOS TENEDORES %i Y %i\n", data->philosophers[active].index_philosopher, fork_right, fork_left);
	//----------FIN ASIGNACION TENEDORES----------
	
	//----------COMIENZO ASIGNACION TIEMPO INICIO THREAD----------
	data->philosophers[active].start_thread = ft_get_time();
	//----------FIN ASIGNACION TIEMPO INICIO THREAD----------

	if (data->philosophers[active].time_to_die > 0 && data->total_philosophers > 1)
	{
		//MIENTRAS TODOS LOS FILOSOFOS ESTEN VIVOS Y NO SE HAYA LLEGADO AL NUMERO DE COMIDAS INTRODUCIDO POR PARAMETRO
		while (data->all_alive == 1 && data->philosophers[active].number_exit == 0)
		{
			// printf("FILOSOFO %i --- DENTRO DEL WHILE DATA_ALL_ALIVE\n", data->philosophers[active].index_philosopher);

			//MIENTRAS LOS TENEDORES QUE SE DEBEN USAR POR EL FILOSOFO ESTEN OCUPADOS SE MANTIENE A LA ESPERA
			while (data->forks[fork_right].using == 1 || data->forks[fork_left].using == 1)
			{
				// printf("FILOSOFO %i ESPERANDO TENEDOR\n", data->philosophers[active].index_philosopher);
				usleep(100);
			}
			// printf("FILOSOFO %i TIENE LOS TENEDORES\n", active + 1);
			if (data->all_alive == 1) //COMER
			{
				// printf("DENTRO DEL IF COMER FILOSOFO %i\n", active + 1);
				data->forks[fork_right].using = 1;
				data->forks[fork_left].using = 1;
				pthread_mutex_lock(&data->forks[fork_right].fork_mutex);
				pthread_mutex_lock(&data->forks[fork_left].fork_mutex);
				// printf("FILOSOFO %i BLOQUEANDO MUTEX PARA IMPRIMIR MENSAJE COMIDA\n", data->philosophers[active].index_philosopher);
				pthread_mutex_lock(&data->m_message);
				ft_p_message(data, ft_get_time(), active, " has taken a fork");
				ft_p_message(data, ft_get_time(), active, " has taken a fork");
				ft_p_message(data, ft_get_time(), active, " is eating");
				pthread_mutex_unlock(&data->m_message);
				//time = ft_get_time();
				stop_time = ft_get_time() + data->philosophers[active].time_to_eat;
				// printf("EL FILOSOFO %i ESTA PREPARADO PARA COMER\n", active+1);
				while (ft_get_time() < stop_time && data->all_alive == 1)
				{
					//printf("FILOSOFO %i STOP_TIME -> %li	TIME -> %li\n", active + 1, stop_time, ft_get_time());
					usleep(1000);
				}
				//printf("EL FILOSOFO %i HA TERMINADO DE COMER\n", active+1);
				data->philosophers[active].last_eating = ft_get_time();
				//printf("EL FILOSOFO %i HA ACTUALIZADO LA ULTIMA VEZ QUE COMIO A %li\n", active + 1, data->philosophers[active].last_eating);
				pthread_mutex_unlock(&data->forks[fork_left].fork_mutex);
				pthread_mutex_unlock(&data->forks[fork_right].fork_mutex);
				data->forks[fork_left].using = 0;
				data->forks[fork_right].using = 0;
				n_times++;
			}
			//printf("FILOSOFO %i NUMBER_OF_TIMES -> %i\n", active + 1, data->philosophers[active].number_of_times);
			if (data->philosophers[active].number_of_times != -1 && n_times >= data->philosophers[active].number_of_times)
			{
				data->philosophers[active].number_exit = 1;
				//printf("FILOSOFO %i HA FINALIZADO DE COMER\n", data->philosophers[active].index_philosopher);
			}
			if (data->philosophers[active].number_exit == 0)
			{
				if (data->all_alive == 1)
				{
					pthread_mutex_lock(&data->m_message);
					ft_p_message(data, ft_get_time(), active, " is sleeping");
					pthread_mutex_unlock(&data->m_message);
					time = ft_get_time();
					stop_time = time + data->philosophers[active].time_to_sleep;
					while (ft_get_time() < stop_time && data->all_alive == 1)
						usleep(1000);
				}
				if (data->all_alive == 1)
				{
					//Ahora calculamos el tiempo de pensar
					time = ft_get_time();
					//printf("FILOSOFO %i TIME -> %li		LAST_EATING -> %li\n", active+1, time, data->philosophers[active].last_eating);
					stop_time = (data->philosophers[active].time_to_die - ((time - data->philosophers[active].last_eating) + data->philosophers[active].time_to_eat)) / 3;
					// printf("F%i TIEMPO DE PENSAR\n", active + 1);
					// printf("F%i TIME TO DIE -> %li\n", active + 1, data->philosophers[active].time_to_die);
					// printf("F%i ft_get_time() -> %li\n", active + 1, ft_get_time());
					// printf("F%i LAST EATING -> %li\n", active + 1, data->philosophers[active].last_eating);
					// printf("F%i TIME TO EAT -> %li\n", active + 1, data->philosophers[active].time_to_eat);
					// printf("F%i (FT_GET_TIME - LAST_EATING) + TIME_TO_EAT = %li\n", active + 1, (ft_get_time() - data->philosophers[active].last_eating) + data->philosophers[active].time_to_eat);
					// printf("F%i (data->philosophers[active].time_to_die - ((ft_get_time() - data->philosophers[active].last_eating) + data->philosophers[active].time_to_eat)) -> %li\n", active + 1, (data->philosophers[active].time_to_die - ((ft_get_time() - data->philosophers[active].last_eating) + data->philosophers[active].time_to_eat)));
					// printf("F%i STOP_TIME = %li\n", active + 1, stop_time);
					// printf("FILOSOFO %i STOP TIME THINKING -> %li\n", active+1, stop_time);
					if (stop_time > 500)
						stop_time = 500;
					if (stop_time > 0)
					{
						if (data->all_alive == 1)
						{
							pthread_mutex_lock(&data->m_message);
							ft_p_message(data, ft_get_time(), active, " is thinking");
							pthread_mutex_unlock(&data->m_message);
						}
						if (stop_time > 100)
						{
							// printf("F%i HA ENTRADO EN EL BUCLE DE ESPERA DE TIEMPO DE PENSAR\n", active + 1);
							stop_time += time;
							while (ft_get_time() < stop_time && data->all_alive == 1)
								usleep(1000);
						}
					}
				}
				stop_time = 0;
				//printf("FILOSOFO_ACTIVO -> %i\n", data->philosophers[active].index_philosopher);
				//usleep(200000);
			}
		}
	}
	while (data->message_end == 0 && data->philosophers[active].number_exit == 0 && data->all_alive == 1)
		usleep(100);
	//printf("FINAL FILOSOFO %i\n", data->philosophers[active].index_philosopher);
	return (NULL);
}

//Rellenamos el array de filosofos con los datos introducidos
void	ft_fill_data(t_philosopher *phil, long int *data, int n_arg)
{
	int	p;

	p = 0;
	// printf("----------DATOS INTRODUCIDOS----------\n");
	// printf("ARG[0] -> %i\n", data[0]);
	// printf("ARG[1] -> %i\n", data[1]);
	// printf("ARG[2] -> %i\n", data[2]);
	// printf("ARG[3] -> %i\n", data[3]);
	// printf("ARG[4] -> %i\n", data[4]);
	while (p < data[0])
	{
		phil[p].index_philosopher = p + 1;
		phil[p].time_to_die = data[1];
		phil[p].time_to_eat = data[2];
		phil[p].time_to_sleep = data[3];
		if (n_arg == 5)
			phil[p].number_of_times = data[4];
		else
			phil[p].number_of_times = -1;
		p++;
	}
}

//Creamos el array de filosofos segun el numero introducido en args[0]
t_philosopher	*ft_create_philosophers(int n_philosophers)
{
	t_philosopher	*philosophers;
	int				n;

	n = 0;
	philosophers = malloc (n_philosophers * sizeof(*philosophers));
	if (!philosophers)
		return (NULL);
	while (n < n_philosophers)
	{
		philosophers[n].index_philosopher = -1;
		philosophers[n].time_to_die = -1;
		philosophers[n].time_to_eat = -1;
		philosophers[n].time_to_sleep = -1;
		philosophers[n].number_of_times = -1;
		philosophers[n].last_eating = -1;
		//philosophers[n].last_sleeping = -1;
		//philosophers[n].last_thinking = -1;
		philosophers[n].start_thread = -1;
		philosophers[n].number_exit = 0;
		n++;
	}
	return (philosophers);
}

//REVISAR EL PLANTEAMIENTO DE LOS HILOS
//HACERLO UNO POR CADA ACCIÓN (COMER, DORMIR, PENSAR) EN LUGAR DE POR CADA FILOSOFO
pthread_t	*ft_create_threads(int n_philosophers)
{
	pthread_t	*threads;

	threads = malloc (n_philosophers * sizeof (*threads));
	if (!threads)
		return (NULL);
	return (threads);
}

void	ft_initialize_threads(t_all *data)
{
	int	n;

	n = 0;
	while (n < data->total_philosophers)
	{
		data->active = n;
		pthread_create(&data->threads[n], NULL, philosopher, data);
		usleep(1000);
		n++;
	}
	n = 0;
	while (n < data->total_philosophers)
	{
		pthread_join(data->threads[n], NULL);
		n++;
	}
}

void	ft_destroy_mutex(int n_philosophers, t_fork *forks)
{
	int	n;

	n = 0;
	while (n < n_philosophers)
	{
		pthread_mutex_destroy(&forks[n].fork_mutex);
		n++;
	}
}

pthread_mutex_t	*ft_create_mutex(int n_philosophers)
{
	pthread_mutex_t	*forks;
	int				n;

	n = 0;
	forks = malloc (n_philosophers * sizeof (*forks));
	if (!forks)
		return (NULL);
	while (n < n_philosophers)
	{
		pthread_mutex_init(&forks[n], NULL);
		n++;
	}
	return (forks);
}

t_fork	*ft_create_forks(int n_philosophers)
{
	t_fork	*forks;
	int		n;

	n = 0;
	forks = malloc (n_philosophers * sizeof (*forks));
	if (!forks)
		return (NULL);
	while (n < n_philosophers)
	{
		forks[n].using = 0;
		pthread_mutex_init(&forks[n].fork_mutex, NULL);
		n++;
	}
	return (forks);
}

void	ft_p_message(t_all *data, long int time, int phil, char *m)
{
	//printf("DENTRO DE LA IMPRESION DEL MENSAJE\n");
	//pthread_mutex_lock(&data->m_m);
	//printf("MENSAJE --- BLOQUEADO MUTEX\n");
	ft_print_number(time);
	write(1, " ", 1);
	ft_print_number(data->philosophers[phil].index_philosopher);
	write(1, " ", 1);
	write(1, m, ft_strlen(m));
	write(1, "\n", 1);
	//data->message_end = 1;
}

void	*ft_all_alive(void *arg)
{
	t_all		*data;
	int			n;
	long int	time;
	long int	time_start;

	data = (t_all *) arg;
	n = 0;
	time = 0;
	//printf("COMIENZO DE FT_ALL_ALIVE -> %li\n", ft_get_time());
	//printf("DENTRO DE FT_ALL_ALIVE\n");
	//printf("TOTAL FILOSOFOS -> %i\n", data->total_philosophers);
	while (data->all_alive == 1 && data->message_end == 0)
	{
		//printf("DENTRO DEL PRIMER WHILE\n");
		while (n < data->total_philosophers && data->all_alive == 1)
		{
			//printf("DENTRO DEL SEGUNDO WHILE\n");
			// while (data->philosophers[n].start_thread == -1)
			// {
			// 	printf("ESPERANDO FILOSOFO %i TIEMPO %li\n", n+1, ft_get_time());
			// 	usleep(1000);
			// }
			//printf("----------FILOSOFO %i----------\nSTART_THREAD = %li\n", n + 1, data->philosophers[n].start_thread);
			if (data->philosophers[n].start_thread != -1)
			{
				//printf("----------CUANDO START_TRHEAD != -1----------\n----------FILOSOFO %i----------\n", n + 1);
				if (data->philosophers[n].last_eating == -1)
				{
					//printf("FILOSOFO %i HA ENTRADO EN LAST_EATING == -1\n", n+1);
					time_start = data->philosophers[n].start_thread;
				}
				else
				{
					//printf("FILOSOFO %i HA ENTRADO EN LAST_EATING != -1\n", n+1);
					time_start = data->philosophers[n].last_eating;
				}
				time = ft_get_time();
				if ((time - time_start) >= data->philosophers[n].time_to_die)
				{
					if (data->philosophers[n].number_exit == 0)
					{
						pthread_mutex_lock(&data->m_a_alive);
						data->all_alive = 0;
						pthread_mutex_unlock(&data->m_a_alive);
						pthread_mutex_lock(&data->m_message);
						ft_p_message(data, time, n, " died");
						//printf("FILOSOFO %i LAST EAT -> %li\n", n+1, data->philosophers[n].last_eating);
						//printf("TIME -> %li\t\tTIME_START -> %li\t\tTIME_TO_DIE ->%li\n", time, time_start, data->philosophers[n].time_to_die);
						pthread_mutex_unlock(&data->m_message);
						//printf("EL FILOSOFO %i HA MUERTO\n", n+1);
					}
				}
			}
			n++;
			//printf("SE HA INCREMENTADO N --- N = %i\n", n);
		}
		n = 0;
		//printf("SE HA RESETEADO EL VALOR DE N --- N = %i\n", n);
		//printf("DATA ALL_ALIVE = %i\t\t\tMESSAGE_END = %i\n", data->all_alive, data->message_end);
		usleep(1000);
	}
	//printf("HA SALIDO DEL CONTROL\n");
	return (NULL);
}

void	ft_fill_t_all(t_all *data, long int *args, int n_arg)
{
	data->total_philosophers = args[0];
	data->message_end = 0;
	data->philosophers = ft_create_philosophers(args[0]);
	ft_fill_data(data->philosophers, args, n_arg);
	data->forks	= ft_create_forks(args[0]);
	//data->m_a_alive = *(ft_create_mutex(1));
	pthread_mutex_init(&data->m_a_alive, NULL);
	data->all_alive = 1;
	data->threads = ft_create_threads(args[0]);
	//data->t_alive = *(ft_create_threads(1));
	pthread_create(&data->t_alive, NULL, ft_all_alive, data);
	//data->m_message = *(ft_create_mutex(1));
	pthread_mutex_init(&data->m_message, NULL);
	pthread_detach(data->t_alive);
	ft_initialize_threads(data);
	pthread_mutex_destroy(&data->m_a_alive);
	pthread_mutex_destroy(&data->m_message);
}

int	ft_check_only_numbers(int argc, char **argv)
{
	int	arg;
	int	letter;
	int	check;

	arg = 1;
	letter = 0;
	check = 1;
	while (arg < argc && check == 1)
	{
		while (letter < ft_strlen(argv[arg]) && check == 1)
		{
			if (argv[arg][letter] < 48 || argv[arg][letter] > 57)
				check = 0;
			letter++;
		}
		letter = 0;
		arg++;
	}
	return (check);
}

int	ft_check_limits(long int *args, int n_args)
{
	int	n;
	int	check;

	n = 0;
	check = 1;
	while (n < n_args && check == 1)
	{
		if (args[n] > 2147483647)
			check = 0;
		n++;
	}
	return (check);
}

int	ft_check_args(int argc, char **argv)
{
	long int	*args;

	if (ft_check_only_numbers(argc, argv) != 1)
		return (-1);
	args = ft_get_args(argc, argv);
	if (ft_check_limits(args, argc - 1) != 1)
		return (free (args), -1);
	if (args[0] <= 0)
		return (free (args), -1);
	if (argc == 6 && args[4] <= 0)
		return (free (args), -1);
	free (args);
	return (1);	
}

void	ft_free_all(t_all *data)
{
	free (data->philosophers);
	free (data->forks);
	// free (&data->m_a_alive);
	free (data->threads);
	// free (&data->t_alive);
	// free (&data->m_message);
}

//args[0] -> numero de filosofos
//args[1] -> tiempo que tardan en morir si no comen 	(en milisegundos)
//args[2] -> tiempo que tardan en comer			(en milisegundos)
//args[3] -> tiempo que tardan en dormir		(en milisegundos)
//args[4] -> veces que tienen que comer todos antes de terminar el programa. 
//	     Si no se especifica el programa se ejecutara hasta que un filosofo muera
int main(int argc, char **argv)
{
	long int	*args;
	t_all		all_phi;

	if (argc == 5 || argc == 6)
	{
		if (ft_check_args(argc, argv) == 1)
		{
			args = ft_get_args(argc, argv);

			// printf("PARAMETROS CORRECTOS\n");

			// printf("----------DATOS INTRODUCIDOS----------\n");
			// printf("ARG[0] -> %li\n", args[0]);
			// printf("ARG[1] -> %li\n", args[1]);
			// printf("ARG[2] -> %li\n", args[2]);
			// printf("ARG[3] -> %li\n", args[3]);
			// printf("ARG[4] -> %li\n", args[4]);
			
			ft_fill_t_all(&all_phi, args, argc - 1);
			ft_destroy_mutex(all_phi.total_philosophers, all_phi.forks);
			free(args);
			ft_free_all(&all_phi);
		}
		else
			printf("ARGUMENTO INVALIDO\n");
	}
	//printf("FINAL DEL PROGRAMA -> %li\n", ft_get_time());
	all_phi.message_end = 1;
	//printf("CAMBIADO MESSAGE_END EN MAIN\n");
	system("leaks a.out");
	return (0);
}
